openapi: 3.0.1
info:
  title: Mortis
  description: API Definitions for Memos 0.21.0-compatible Apps
  version: 0.21.0
servers:
- url: /
paths:
  /api/v1/memo:
    get:
      operationId: listMemos
      tags:
      - memo
      summary: Get a list of memos matching optional filters
      parameters:
      - name: creatorId
        in: query
        description: Creator ID
        schema:
          type: integer
      - name: creatorUsername
        in: query
        description: Creator username
        schema:
          type: string
      - name: rowStatus
        in: query
        description: Row status
        schema:
          type: string
          enum:
          - NORMAL
          - ARCHIVED
      - name: pinned
        in: query
        description: Pinned
        schema:
          type: boolean
      - name: tag
        in: query
        description: "Search for tag. Do not append #"
        schema:
          type: string
      - name: content
        in: query
        description: Search for content
        schema:
          type: string
      - name: limit
        in: query
        description: Limit
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset
        schema:
          type: integer
      responses:
        "200":
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memo'
        "400":
          description: Missing user to find memo
          content: {}
        "500":
          description: Failed to get memo display with updated ts setting value |
            Failed to fetch memo list | Failed to compose memo response
          content: {}
    post:
      operationId: createMemo
      tags:
      - memo
      summary: Create a memo
      description: |-
        Visibility can be PUBLIC, PROTECTED or PRIVATE
        *You should omit fields to use their default values
      requestBody:
        description: Request object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemoRequest'
        required: true
      responses:
        "200":
          description: Stored memo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
        "400":
          description: "Malformatted post memo request | Content size overflow, up\
            \ to 1MB"
          content: {}
        "401":
          description: Missing user in session
          content: {}
        "404":
          description: "User not found | Memo not found: %d"
          content: {}
        "500":
          description: Failed to find user setting | Failed to unmarshal user setting
            value | Failed to find system setting | Failed to unmarshal system setting
            | Failed to find user | Failed to create memo | Failed to create activity
            | Failed to upsert memo resource | Failed to upsert memo relation | Failed
            to compose memo | Failed to compose memo response
          content: {}
      x-codegen-request-body-name: body
  /api/v1/memo/{memoId}:
    get:
      operationId: getMemo
      tags:
      - memo
      summary: Get memo by ID
      parameters:
      - name: memoId
        in: path
        description: Memo ID
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Memo list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
        "400":
          description: "ID is not a number: %s"
          content: {}
        "401":
          description: Missing user in session
          content: {}
        "403":
          description: "this memo is private only | this memo is protected, missing\
            \ user in session"
          content: {}
        "404":
          description: "Memo not found: %d"
          content: {}
        "500":
          description: "Failed to find memo by ID: %v | Failed to compose memo response"
          content: {}
    delete:
      operationId: deleteMemo
      tags:
      - memo
      summary: Delete memo by ID
      parameters:
      - name: memoId
        in: path
        description: Memo ID to delete
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Memo deleted
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: "ID is not a number: %s"
          content: {}
        "401":
          description: Missing user in session | Unauthorized
          content: {}
        "404":
          description: "Memo not found: %d"
          content: {}
        "500":
          description: "Failed to find memo | Failed to delete memo ID: %v"
          content: {}
    patch:
      operationId: updateMemo
      tags:
      - memo
      summary: Update a memo
      description: |-
        Visibility can be PUBLIC, PROTECTED or PRIVATE
        *You should omit fields to use their default values
      parameters:
      - name: memoId
        in: path
        description: ID of memo to update
        required: true
        schema:
          type: integer
      requestBody:
        description: Patched object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMemoRequest'
        required: true
      responses:
        "200":
          description: Stored memo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
        "400":
          description: "ID is not a number: %s | Malformatted patch memo request |\
            \ Content size overflow, up to 1MB"
          content: {}
        "401":
          description: Missing user in session | Unauthorized
          content: {}
        "404":
          description: "Memo not found: %d"
          content: {}
        "500":
          description: Failed to find memo | Failed to patch memo | Failed to upsert
            memo resource | Failed to delete memo resource | Failed to compose memo
            response
          content: {}
      x-codegen-request-body-name: body
  /api/v1/memo/{memoId}/organizer:
    post:
      operationId: organizeMemo
      tags:
      - memo-organizer
      summary: Organize memo (pin/unpin)
      parameters:
      - name: memoId
        in: path
        description: ID of memo to organize
        required: true
        schema:
          type: integer
      requestBody:
        description: Memo organizer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMemoOrganizerRequest'
        required: true
      responses:
        "200":
          description: Memo information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Memo'
        "400":
          description: "ID is not a number: %s | Malformatted post memo organizer\
            \ request"
          content: {}
        "401":
          description: Missing user in session | Unauthorized
          content: {}
        "404":
          description: "Memo not found: %v"
          content: {}
        "500":
          description: "Failed to find memo | Failed to upsert memo organizer | Failed\
            \ to find memo by ID: %v | Failed to compose memo response"
          content: {}
      x-codegen-request-body-name: body
  /api/v1/memo/{memoId}/relation:
    get:
      operationId: getMemoRelations
      tags:
      - memo-relation
      summary: Get a list of Memo Relations
      parameters:
      - name: memoId
        in: path
        description: ID of memo to find relations
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Memo relation information list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemoRelation'
        "400":
          description: "ID is not a number: %s"
          content: {}
        "500":
          description: Failed to list memo relations
          content: {}
  /api/v1/memo/all:
    get:
      operationId: listPublicMemos
      tags:
      - memo
      summary: Get a list of public memos matching optional filters
      description: |-
        This should also list protected memos if the user is logged in
        Authentication is optional
      parameters:
      - name: limit
        in: query
        description: Limit
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset
        schema:
          type: integer
      responses:
        "200":
          description: Memo list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Memo'
        "500":
          description: Failed to get memo display with updated ts setting value |
            Failed to fetch all memo list | Failed to compose memo response
          content: {}
  /api/v1/resource:
    get:
      operationId: listResources
      tags:
      - resource
      summary: Get a list of resources
      parameters:
      - name: limit
        in: query
        description: Limit
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset
        schema:
          type: integer
      responses:
        "200":
          description: Resource list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        "401":
          description: Missing user in session
          content: {}
        "500":
          description: Failed to fetch resource list
          content: {}
  /api/v1/resource/{resourceId}:
    delete:
      operationId: deleteResource
      tags:
      - resource
      summary: Delete a resource
      parameters:
      - name: resourceId
        in: path
        description: Resource ID
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Resource deleted
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: "ID is not a number: %s"
          content: {}
        "401":
          description: Missing user in session
          content: {}
        "404":
          description: "Resource not found: %d"
          content: {}
        "500":
          description: Failed to find resource | Failed to delete resource
          content: {}
    patch:
      operationId: updateResource
      tags:
      - resource
      summary: Update a resource
      parameters:
      - name: resourceId
        in: path
        description: Resource ID
        required: true
        schema:
          type: integer
      requestBody:
        description: Patch resource request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateResourceRequest'
        required: true
      responses:
        "200":
          description: Updated resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: "ID is not a number: %s | Malformatted patch resource request"
          content: {}
        "401":
          description: Missing user in session | Unauthorized
          content: {}
        "404":
          description: "Resource not found: %d"
          content: {}
        "500":
          description: Failed to find resource | Failed to patch resource
          content: {}
      x-codegen-request-body-name: patch
  /api/v1/resource/blob:
    post:
      operationId: uploadResource
      tags:
      - resource
      summary: Upload resource
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: File to upload
                  format: binary
        required: true
      responses:
        "200":
          description: Created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Upload file not found | File size exceeds allowed limit of
            %d MiB | Failed to parse upload data
          content: {}
        "401":
          description: Missing user in session
          content: {}
        "500":
          description: Failed to get uploading file | Failed to open file | Failed
            to save resource | Failed to create resource | Failed to create activity
          content: {}
  /api/v1/status:
    get:
      operationId: getStatus
      tags:
      - system
      summary: Get system GetSystemStatus
      responses:
        "200":
          description: System GetSystemStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        "401":
          description: Missing user in session | Unauthorized
          content: {}
        "500":
          description: Failed to find host user | Failed to find system setting list
            | Failed to unmarshal system setting customized profile value
          content: {}
  /api/v1/tag:
    get:
      operationId: listTags
      tags:
      - tag
      summary: Get a list of tags
      responses:
        "200":
          description: Tag list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Missing user id to find tag
          content: {}
        "500":
          description: Failed to find tag list
          content: {}
    post:
      operationId: createTag
      tags:
      - tag
      summary: Create a tag
      requestBody:
        description: Request object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertTagRequest'
        required: true
      responses:
        "200":
          description: Created tag name
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Malformatted post tag request | Tag name shouldn't be empty
          content: {}
        "401":
          description: Missing user in session
          content: {}
        "500":
          description: Failed to upsert tag | Failed to create activity
          content: {}
      x-codegen-request-body-name: body
  /api/v1/tag/delete:
    post:
      operationId: deleteTag
      tags:
      - tag
      summary: Delete a tag
      requestBody:
        description: Request object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTagRequest'
        required: true
      responses:
        "200":
          description: Tag deleted
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Malformatted post tag request | Tag name shouldn't be empty
          content: {}
        "401":
          description: Missing user in session
          content: {}
        "500":
          description: "Failed to delete tag name: %v"
          content: {}
      x-codegen-request-body-name: body
  /api/v1/user/me:
    get:
      operationId: getCurrentUser
      tags:
      - user
      summary: Get current user
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Missing auth session
          content: {}
        "500":
          description: Failed to find user | Failed to find userSettingList
          content: {}
components:
  schemas:
    MemoRelationType:
      type: string
      enum:
      - REFERENCE
      - COMMENT
      x-enum-varnames:
      - MemoRelationReference
      - MemoRelationComment
    Role:
      type: string
      enum:
      - HOST
      - ADMIN
      - USER
      x-enum-varnames:
      - RoleHost
      - RoleAdmin
      - RoleUser
    RowStatus:
      type: string
      enum:
      - NORMAL
      - ARCHIVED
      x-enum-varnames:
      - Normal
      - Archived
    SystemStatus:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
    UpdateResourceRequest:
      type: object
      properties:
        filename:
          type: string
    UpsertMemoOrganizerRequest:
      type: object
      properties:
        pinned:
          type: boolean
    UpsertMemoRelationRequest:
      type: object
      properties:
        relatedMemoId:
          type: integer
        type:
          $ref: '#/components/schemas/MemoRelationType'
    UpsertTagRequest:
      type: object
      properties:
        name:
          type: string
    User:
      type: object
      properties:
        avatarUrl:
          type: string
        createdTs:
          type: integer
        email:
          type: string
        id:
          type: integer
        nickname:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        rowStatus:
          type: object
          description: Standard fields
          $ref: '#/components/schemas/RowStatus'
        updatedTs:
          type: integer
        username:
          type: string
          description: Domain specific fields
      required:
      - id
    Visibility:
      type: string
      enum:
      - PUBLIC
      - PROTECTED
      - PRIVATE
      x-enum-varnames:
      - Public
      - Protected
      - Private
    CreateMemoRequest:
      type: object
      properties:
        content:
          type: string
        createdTs:
          type: integer
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/UpsertMemoRelationRequest'
        resourceIdList:
          type: array
          description: Related fields
          items:
            type: integer
        visibility:
          type: object
          description: Domain specific fields
          $ref: '#/components/schemas/Visibility'
    DeleteTagRequest:
      type: object
      properties:
        name:
          type: string
    PatchMemoRequest:
      type: object
      properties:
        content:
          type: string
          description: Domain specific fields
        createdTs:
          type: integer
          description: Standard fields
        relationList:
          type: array
          items:
            $ref: '#/components/schemas/UpsertMemoRelationRequest'
        resourceIdList:
          type: array
          description: Related fields
          items:
            type: integer
        rowStatus:
          $ref: '#/components/schemas/RowStatus'
        updatedTs:
          type: integer
        visibility:
          $ref: '#/components/schemas/Visibility'
    Profile:
      type: object
      properties:
        mode:
          type: string
          description: Mode can be "prod" or "dev" or "demo"
        version:
          type: string
          description: Version is the current version of server
    Memo:
      type: object
      properties:
        content:
          type: string
          description: Domain specific fields
        createdTs:
          type: integer
        creatorId:
          type: integer
        id:
          type: integer
        parentID:
          type: integer
        pinned:
          type: boolean
          description: Composed fields
        resourceList:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
        rowStatus:
          type: object
          description: Standard fields
          $ref: '#/components/schemas/RowStatus'
        updatedTs:
          type: integer
        visibility:
          $ref: '#/components/schemas/Visibility'
      required:
      - id
      - createdTs
      - content
    MemoRelation:
      type: object
      properties:
        memoID:
          type: integer
        relatedMemoID:
          type: integer
        type:
          $ref: '#/components/schemas/MemoRelationType'
    Resource:
      type: object
      properties:
        createdTs:
          type: integer
        creatorId:
          type: integer
          description: Standard fields
        externalLink:
          type: string
        filename:
          type: string
          description: Domain specific fields
        id:
          type: integer
        size:
          type: integer
        type:
          type: string
        updatedTs:
          type: integer
        name:
          type: string
        uid:
          type: string
      required:
      - id
      - filename