// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for MemoRelationType.
const (
	MemoRelationComment   MemoRelationType = "COMMENT"
	MemoRelationReference MemoRelationType = "REFERENCE"
)

// Defines values for Role.
const (
	RoleAdmin Role = "ADMIN"
	RoleHost  Role = "HOST"
	RoleUser  Role = "USER"
)

// Defines values for RowStatus.
const (
	Archived RowStatus = "ARCHIVED"
	Normal   RowStatus = "NORMAL"
)

// Defines values for Visibility.
const (
	Private   Visibility = "PRIVATE"
	Protected Visibility = "PROTECTED"
	Public    Visibility = "PUBLIC"
)

// Defines values for ListMemosParamsRowStatus.
const (
	ARCHIVED ListMemosParamsRowStatus = "ARCHIVED"
	NORMAL   ListMemosParamsRowStatus = "NORMAL"
)

// CreateMemoRequest defines model for CreateMemoRequest.
type CreateMemoRequest struct {
	Content      *string                      `json:"content,omitempty"`
	CreatedTs    *int                         `json:"createdTs,omitempty"`
	RelationList *[]UpsertMemoRelationRequest `json:"relationList,omitempty"`

	// ResourceIdList Related fields
	ResourceIdList *[]int      `json:"resourceIdList,omitempty"`
	Visibility     *Visibility `json:"visibility,omitempty"`
}

// DeleteTagRequest defines model for DeleteTagRequest.
type DeleteTagRequest struct {
	Name *string `json:"name,omitempty"`
}

// Memo defines model for Memo.
type Memo struct {
	// Content Domain specific fields
	Content   string `json:"content"`
	CreatedTs int    `json:"createdTs"`
	CreatorID *int   `json:"creatorID,omitempty"`
	Id        int    `json:"id"`
	ParentID  *int   `json:"parentID,omitempty"`

	// Pinned Composed fields
	Pinned       *bool       `json:"pinned,omitempty"`
	ResourceList *[]Resource `json:"resourceList,omitempty"`
	RowStatus    *RowStatus  `json:"rowStatus,omitempty"`
	UpdatedTs    *int        `json:"updatedTs,omitempty"`
	Visibility   *Visibility `json:"visibility,omitempty"`
}

// MemoRelation defines model for MemoRelation.
type MemoRelation struct {
	MemoID        *int              `json:"memoID,omitempty"`
	RelatedMemoID *int              `json:"relatedMemoID,omitempty"`
	Type          *MemoRelationType `json:"type,omitempty"`
}

// MemoRelationType defines model for MemoRelationType.
type MemoRelationType string

// PatchMemoRequest defines model for PatchMemoRequest.
type PatchMemoRequest struct {
	// Content Domain specific fields
	Content *string `json:"content,omitempty"`

	// CreatedTs Standard fields
	CreatedTs    *int                         `json:"createdTs,omitempty"`
	RelationList *[]UpsertMemoRelationRequest `json:"relationList,omitempty"`

	// ResourceIdList Related fields
	ResourceIdList *[]int      `json:"resourceIdList,omitempty"`
	RowStatus      *RowStatus  `json:"rowStatus,omitempty"`
	UpdatedTs      *int        `json:"updatedTs,omitempty"`
	Visibility     *Visibility `json:"visibility,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	// Mode Mode can be "prod" or "dev" or "demo"
	Mode *string `json:"mode,omitempty"`

	// Version Version is the current version of server
	Version *string `json:"version,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	CreatedTs *int `json:"createdTs,omitempty"`

	// CreatorID Standard fields
	CreatorID    *int    `json:"creatorID,omitempty"`
	ExternalLink *string `json:"externalLink,omitempty"`

	// Filename Domain specific fields
	Filename  string  `json:"filename"`
	Id        int     `json:"id"`
	Name      *string `json:"name,omitempty"`
	Size      *int    `json:"size,omitempty"`
	Type      *string `json:"type,omitempty"`
	Uid       *string `json:"uid,omitempty"`
	UpdatedTs *int    `json:"updatedTs,omitempty"`
}

// Role defines model for Role.
type Role string

// RowStatus defines model for RowStatus.
type RowStatus string

// SystemStatus defines model for SystemStatus.
type SystemStatus struct {
	Profile *Profile `json:"profile,omitempty"`
}

// UpdateResourceRequest defines model for UpdateResourceRequest.
type UpdateResourceRequest struct {
	Filename *string `json:"filename,omitempty"`
}

// UpsertMemoOrganizerRequest defines model for UpsertMemoOrganizerRequest.
type UpsertMemoOrganizerRequest struct {
	Pinned *bool `json:"pinned,omitempty"`
}

// UpsertMemoRelationRequest defines model for UpsertMemoRelationRequest.
type UpsertMemoRelationRequest struct {
	RelatedMemoId *int              `json:"relatedMemoId,omitempty"`
	Type          *MemoRelationType `json:"type,omitempty"`
}

// UpsertTagRequest defines model for UpsertTagRequest.
type UpsertTagRequest struct {
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	AvatarUrl *string    `json:"avatarUrl,omitempty"`
	CreatedTs *int       `json:"createdTs,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        int        `json:"id"`
	Nickname  *string    `json:"nickname,omitempty"`
	Role      *Role      `json:"role,omitempty"`
	RowStatus *RowStatus `json:"rowStatus,omitempty"`
	UpdatedTs *int       `json:"updatedTs,omitempty"`

	// Username Domain specific fields
	Username *string `json:"username,omitempty"`
}

// Visibility defines model for Visibility.
type Visibility string

// ListMemosParams defines parameters for ListMemos.
type ListMemosParams struct {
	// CreatorId Creator ID
	CreatorId *int `form:"creatorId,omitempty" json:"creatorId,omitempty"`

	// CreatorUsername Creator username
	CreatorUsername *string `form:"creatorUsername,omitempty" json:"creatorUsername,omitempty"`

	// RowStatus Row status
	RowStatus *ListMemosParamsRowStatus `form:"rowStatus,omitempty" json:"rowStatus,omitempty"`

	// Pinned Pinned
	Pinned *bool `form:"pinned,omitempty" json:"pinned,omitempty"`

	// Tag Search for tag. Do not append #
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Content Search for content
	Content *string `form:"content,omitempty" json:"content,omitempty"`

	// Limit Limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListMemosParamsRowStatus defines parameters for ListMemos.
type ListMemosParamsRowStatus string

// ListPublicMemosParams defines parameters for ListPublicMemos.
type ListPublicMemosParams struct {
	// Limit Limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListResourcesParams defines parameters for ListResources.
type ListResourcesParams struct {
	// Limit Limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UploadResourceMultipartBody defines parameters for UploadResource.
type UploadResourceMultipartBody struct {
	// File File to upload
	File openapi_types.File `json:"file"`
}

// CreateMemoJSONRequestBody defines body for CreateMemo for application/json ContentType.
type CreateMemoJSONRequestBody = CreateMemoRequest

// UpdateMemoJSONRequestBody defines body for UpdateMemo for application/json ContentType.
type UpdateMemoJSONRequestBody = PatchMemoRequest

// OrganizeMemoJSONRequestBody defines body for OrganizeMemo for application/json ContentType.
type OrganizeMemoJSONRequestBody = UpsertMemoOrganizerRequest

// UploadResourceMultipartRequestBody defines body for UploadResource for multipart/form-data ContentType.
type UploadResourceMultipartRequestBody UploadResourceMultipartBody

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = UpsertTagRequest

// DeleteTagJSONRequestBody defines body for DeleteTag for application/json ContentType.
type DeleteTagJSONRequestBody = DeleteTagRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of memos matching optional filters
	// (GET /api/v1/memo)
	ListMemos(ctx echo.Context, params ListMemosParams) error
	// Create a memo
	// (POST /api/v1/memo)
	CreateMemo(ctx echo.Context) error
	// Get a list of public memos matching optional filters
	// (GET /api/v1/memo/all)
	ListPublicMemos(ctx echo.Context, params ListPublicMemosParams) error
	// Delete memo by ID
	// (DELETE /api/v1/memo/{memoId})
	DeleteMemo(ctx echo.Context, memoId int) error
	// Get memo by ID
	// (GET /api/v1/memo/{memoId})
	GetMemo(ctx echo.Context, memoId int) error
	// Update a memo
	// (PATCH /api/v1/memo/{memoId})
	UpdateMemo(ctx echo.Context, memoId int) error
	// Organize memo (pin/unpin)
	// (POST /api/v1/memo/{memoId}/organizer)
	OrganizeMemo(ctx echo.Context, memoId int) error
	// Get a list of Memo Relations
	// (GET /api/v1/memo/{memoId}/relation)
	GetMemoRelations(ctx echo.Context, memoId int) error
	// Get a list of resources
	// (GET /api/v1/resource)
	ListResources(ctx echo.Context, params ListResourcesParams) error
	// Upload resource
	// (POST /api/v1/resource/blob)
	UploadResource(ctx echo.Context) error
	// Delete a resource
	// (DELETE /api/v1/resource/{resourceId})
	DeleteResource(ctx echo.Context, resourceId int) error
	// Update a resource
	// (PATCH /api/v1/resource/{resourceId})
	UpdateResource(ctx echo.Context, resourceId int) error
	// Get system GetSystemStatus
	// (GET /api/v1/status)
	GetStatus(ctx echo.Context) error
	// Get a list of tags
	// (GET /api/v1/tag)
	ListTags(ctx echo.Context) error
	// Create a tag
	// (POST /api/v1/tag)
	CreateTag(ctx echo.Context) error
	// Delete a tag
	// (POST /api/v1/tag/delete)
	DeleteTag(ctx echo.Context) error
	// Get current user
	// (GET /api/v1/user/me)
	GetCurrentUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListMemos converts echo context to params.
func (w *ServerInterfaceWrapper) ListMemos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMemosParams
	// ------------- Optional query parameter "creatorId" -------------

	err = runtime.BindQueryParameter("form", true, false, "creatorId", ctx.QueryParams(), &params.CreatorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creatorId: %s", err))
	}

	// ------------- Optional query parameter "creatorUsername" -------------

	err = runtime.BindQueryParameter("form", true, false, "creatorUsername", ctx.QueryParams(), &params.CreatorUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creatorUsername: %s", err))
	}

	// ------------- Optional query parameter "rowStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "rowStatus", ctx.QueryParams(), &params.RowStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rowStatus: %s", err))
	}

	// ------------- Optional query parameter "pinned" -------------

	err = runtime.BindQueryParameter("form", true, false, "pinned", ctx.QueryParams(), &params.Pinned)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pinned: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "content" -------------

	err = runtime.BindQueryParameter("form", true, false, "content", ctx.QueryParams(), &params.Content)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter content: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMemos(ctx, params)
	return err
}

// CreateMemo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMemo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMemo(ctx)
	return err
}

// ListPublicMemos converts echo context to params.
func (w *ServerInterfaceWrapper) ListPublicMemos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPublicMemosParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPublicMemos(ctx, params)
	return err
}

// DeleteMemo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMemo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memoId" -------------
	var memoId int

	err = runtime.BindStyledParameterWithOptions("simple", "memoId", ctx.Param("memoId"), &memoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMemo(ctx, memoId)
	return err
}

// GetMemo converts echo context to params.
func (w *ServerInterfaceWrapper) GetMemo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memoId" -------------
	var memoId int

	err = runtime.BindStyledParameterWithOptions("simple", "memoId", ctx.Param("memoId"), &memoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMemo(ctx, memoId)
	return err
}

// UpdateMemo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMemo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memoId" -------------
	var memoId int

	err = runtime.BindStyledParameterWithOptions("simple", "memoId", ctx.Param("memoId"), &memoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMemo(ctx, memoId)
	return err
}

// OrganizeMemo converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizeMemo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memoId" -------------
	var memoId int

	err = runtime.BindStyledParameterWithOptions("simple", "memoId", ctx.Param("memoId"), &memoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OrganizeMemo(ctx, memoId)
	return err
}

// GetMemoRelations converts echo context to params.
func (w *ServerInterfaceWrapper) GetMemoRelations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "memoId" -------------
	var memoId int

	err = runtime.BindStyledParameterWithOptions("simple", "memoId", ctx.Param("memoId"), &memoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMemoRelations(ctx, memoId)
	return err
}

// ListResources converts echo context to params.
func (w *ServerInterfaceWrapper) ListResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListResourcesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListResources(ctx, params)
	return err
}

// UploadResource converts echo context to params.
func (w *ServerInterfaceWrapper) UploadResource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadResource(ctx)
	return err
}

// DeleteResource converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId int

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteResource(ctx, resourceId)
	return err
}

// UpdateResource converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId int

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateResource(ctx, resourceId)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// ListTags converts echo context to params.
func (w *ServerInterfaceWrapper) ListTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTags(ctx)
	return err
}

// CreateTag converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTag(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTag(ctx)
	return err
}

// DeleteTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTag(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTag(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/memo", wrapper.ListMemos)
	router.POST(baseURL+"/api/v1/memo", wrapper.CreateMemo)
	router.GET(baseURL+"/api/v1/memo/all", wrapper.ListPublicMemos)
	router.DELETE(baseURL+"/api/v1/memo/:memoId", wrapper.DeleteMemo)
	router.GET(baseURL+"/api/v1/memo/:memoId", wrapper.GetMemo)
	router.PATCH(baseURL+"/api/v1/memo/:memoId", wrapper.UpdateMemo)
	router.POST(baseURL+"/api/v1/memo/:memoId/organizer", wrapper.OrganizeMemo)
	router.GET(baseURL+"/api/v1/memo/:memoId/relation", wrapper.GetMemoRelations)
	router.GET(baseURL+"/api/v1/resource", wrapper.ListResources)
	router.POST(baseURL+"/api/v1/resource/blob", wrapper.UploadResource)
	router.DELETE(baseURL+"/api/v1/resource/:resourceId", wrapper.DeleteResource)
	router.PATCH(baseURL+"/api/v1/resource/:resourceId", wrapper.UpdateResource)
	router.GET(baseURL+"/api/v1/status", wrapper.GetStatus)
	router.GET(baseURL+"/api/v1/tag", wrapper.ListTags)
	router.POST(baseURL+"/api/v1/tag", wrapper.CreateTag)
	router.POST(baseURL+"/api/v1/tag/delete", wrapper.DeleteTag)
	router.GET(baseURL+"/api/v1/user/me", wrapper.GetCurrentUser)

}
